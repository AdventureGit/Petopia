#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Petopia
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PetopiaNew")]
	public partial class PetopiaLinkerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAvailability(Availability instance);
    partial void UpdateAvailability(Availability instance);
    partial void DeleteAvailability(Availability instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertIsAdopted(IsAdopted instance);
    partial void UpdateIsAdopted(IsAdopted instance);
    partial void DeleteIsAdopted(IsAdopted instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertLogStatus(LogStatus instance);
    partial void UpdateLogStatus(LogStatus instance);
    partial void DeleteLogStatus(LogStatus instance);
    partial void InsertPet(Pet instance);
    partial void UpdatePet(Pet instance);
    partial void DeletePet(Pet instance);
    partial void InsertPetType(PetType instance);
    partial void UpdatePetType(PetType instance);
    partial void DeletePetType(PetType instance);
    #endregion
		
		public PetopiaLinkerDataContext() : 
				base(global::Petopia.Properties.Settings.Default.PetopiaNewConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PetopiaLinkerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetopiaLinkerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetopiaLinkerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetopiaLinkerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Availability> Availabilities
		{
			get
			{
				return this.GetTable<Availability>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<IsAdopted> IsAdopteds
		{
			get
			{
				return this.GetTable<IsAdopted>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<LogStatus> LogStatus
		{
			get
			{
				return this.GetTable<LogStatus>();
			}
		}
		
		public System.Data.Linq.Table<Pet> Pets
		{
			get
			{
				return this.GetTable<Pet>();
			}
		}
		
		public System.Data.Linq.Table<PetType> PetTypes
		{
			get
			{
				return this.GetTable<PetType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Availability")]
	public partial class Availability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Availability_ID;
		
		private string _Availability_Status;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvailability_IDChanging(string value);
    partial void OnAvailability_IDChanged();
    partial void OnAvailability_StatusChanging(string value);
    partial void OnAvailability_StatusChanged();
    #endregion
		
		public Availability()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Availability_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Availability_ID
		{
			get
			{
				return this._Availability_ID;
			}
			set
			{
				if ((this._Availability_ID != value))
				{
					this.OnAvailability_IDChanging(value);
					this.SendPropertyChanging();
					this._Availability_ID = value;
					this.SendPropertyChanged("Availability_ID");
					this.OnAvailability_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Availability_Status", DbType="NChar(10)")]
		public string Availability_Status
		{
			get
			{
				return this._Availability_Status;
			}
			set
			{
				if ((this._Availability_Status != value))
				{
					this.OnAvailability_StatusChanging(value);
					this.SendPropertyChanging();
					this._Availability_Status = value;
					this.SendPropertyChanged("Availability_Status");
					this.OnAvailability_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Availability_Item", Storage="_Items", ThisKey="Availability_ID", OtherKey="Availability_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Availability = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Availability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Employee_ID;
		
		private string _Employee_Name;
		
		private string _Employee_Username;
		
		private string _Employee_Password;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployee_IDChanging(string value);
    partial void OnEmployee_IDChanged();
    partial void OnEmployee_NameChanging(string value);
    partial void OnEmployee_NameChanged();
    partial void OnEmployee_UsernameChanging(string value);
    partial void OnEmployee_UsernameChanged();
    partial void OnEmployee_PasswordChanging(string value);
    partial void OnEmployee_PasswordChanged();
    #endregion
		
		public Employee()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Name", DbType="NChar(10)")]
		public string Employee_Name
		{
			get
			{
				return this._Employee_Name;
			}
			set
			{
				if ((this._Employee_Name != value))
				{
					this.OnEmployee_NameChanging(value);
					this.SendPropertyChanging();
					this._Employee_Name = value;
					this.SendPropertyChanged("Employee_Name");
					this.OnEmployee_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Username", DbType="NChar(10)")]
		public string Employee_Username
		{
			get
			{
				return this._Employee_Username;
			}
			set
			{
				if ((this._Employee_Username != value))
				{
					this.OnEmployee_UsernameChanging(value);
					this.SendPropertyChanging();
					this._Employee_Username = value;
					this.SendPropertyChanged("Employee_Username");
					this.OnEmployee_UsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Password", DbType="NChar(10)")]
		public string Employee_Password
		{
			get
			{
				return this._Employee_Password;
			}
			set
			{
				if ((this._Employee_Password != value))
				{
					this.OnEmployee_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Employee_Password = value;
					this.SendPropertyChanged("Employee_Password");
					this.OnEmployee_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Item", Storage="_Items", ThisKey="Employee_ID", OtherKey="Employee_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Log", Storage="_Logs", ThisKey="Employee_ID", OtherKey="Employee_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Pet", Storage="_Pets", ThisKey="Employee_ID", OtherKey="Employee_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IsAdopted")]
	public partial class IsAdopted : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IsAdopted_ID;
		
		private string _IsAdopted_Status;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIsAdopted_IDChanging(string value);
    partial void OnIsAdopted_IDChanged();
    partial void OnIsAdopted_StatusChanging(string value);
    partial void OnIsAdopted_StatusChanged();
    #endregion
		
		public IsAdopted()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdopted_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IsAdopted_ID
		{
			get
			{
				return this._IsAdopted_ID;
			}
			set
			{
				if ((this._IsAdopted_ID != value))
				{
					this.OnIsAdopted_IDChanging(value);
					this.SendPropertyChanging();
					this._IsAdopted_ID = value;
					this.SendPropertyChanged("IsAdopted_ID");
					this.OnIsAdopted_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdopted_Status", DbType="NChar(10)")]
		public string IsAdopted_Status
		{
			get
			{
				return this._IsAdopted_Status;
			}
			set
			{
				if ((this._IsAdopted_Status != value))
				{
					this.OnIsAdopted_StatusChanging(value);
					this.SendPropertyChanging();
					this._IsAdopted_Status = value;
					this.SendPropertyChanged("IsAdopted_Status");
					this.OnIsAdopted_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IsAdopted_Pet", Storage="_Pets", ThisKey="IsAdopted_ID", OtherKey="IsAdopted_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.IsAdopted = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.IsAdopted = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Item_ID;
		
		private string _Item_Name;
		
		private string _Item_Price;
		
		private string _Item_Quantity;
		
		private string _PetType_ID;
		
		private string _ItemType_ID;
		
		private string _Availability_ID;
		
		private string _Employee_ID;
		
		private EntityRef<Availability> _Availability;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<PetType> _PetType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_IDChanging(string value);
    partial void OnItem_IDChanged();
    partial void OnItem_NameChanging(string value);
    partial void OnItem_NameChanged();
    partial void OnItem_PriceChanging(string value);
    partial void OnItem_PriceChanged();
    partial void OnItem_QuantityChanging(string value);
    partial void OnItem_QuantityChanged();
    partial void OnPetType_IDChanging(string value);
    partial void OnPetType_IDChanged();
    partial void OnItemType_IDChanging(string value);
    partial void OnItemType_IDChanged();
    partial void OnAvailability_IDChanging(string value);
    partial void OnAvailability_IDChanged();
    partial void OnEmployee_IDChanging(string value);
    partial void OnEmployee_IDChanged();
    #endregion
		
		public Item()
		{
			this._Availability = default(EntityRef<Availability>);
			this._Employee = default(EntityRef<Employee>);
			this._ItemType = default(EntityRef<ItemType>);
			this._PetType = default(EntityRef<PetType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Name", DbType="NChar(10)")]
		public string Item_Name
		{
			get
			{
				return this._Item_Name;
			}
			set
			{
				if ((this._Item_Name != value))
				{
					this.OnItem_NameChanging(value);
					this.SendPropertyChanging();
					this._Item_Name = value;
					this.SendPropertyChanged("Item_Name");
					this.OnItem_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Price", DbType="NChar(10)")]
		public string Item_Price
		{
			get
			{
				return this._Item_Price;
			}
			set
			{
				if ((this._Item_Price != value))
				{
					this.OnItem_PriceChanging(value);
					this.SendPropertyChanging();
					this._Item_Price = value;
					this.SendPropertyChanged("Item_Price");
					this.OnItem_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Quantity", DbType="NChar(10)")]
		public string Item_Quantity
		{
			get
			{
				return this._Item_Quantity;
			}
			set
			{
				if ((this._Item_Quantity != value))
				{
					this.OnItem_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Item_Quantity = value;
					this.SendPropertyChanged("Item_Quantity");
					this.OnItem_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetType_ID", DbType="NChar(10)")]
		public string PetType_ID
		{
			get
			{
				return this._PetType_ID;
			}
			set
			{
				if ((this._PetType_ID != value))
				{
					if (this._PetType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetType_IDChanging(value);
					this.SendPropertyChanging();
					this._PetType_ID = value;
					this.SendPropertyChanged("PetType_ID");
					this.OnPetType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType_ID", DbType="NChar(10)")]
		public string ItemType_ID
		{
			get
			{
				return this._ItemType_ID;
			}
			set
			{
				if ((this._ItemType_ID != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemType_IDChanging(value);
					this.SendPropertyChanging();
					this._ItemType_ID = value;
					this.SendPropertyChanged("ItemType_ID");
					this.OnItemType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Availability_ID", DbType="NChar(10)")]
		public string Availability_ID
		{
			get
			{
				return this._Availability_ID;
			}
			set
			{
				if ((this._Availability_ID != value))
				{
					if (this._Availability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvailability_IDChanging(value);
					this.SendPropertyChanging();
					this._Availability_ID = value;
					this.SendPropertyChanged("Availability_ID");
					this.OnAvailability_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_ID", DbType="NChar(10)")]
		public string Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Availability_Item", Storage="_Availability", ThisKey="Availability_ID", OtherKey="Availability_ID", IsForeignKey=true)]
		public Availability Availability
		{
			get
			{
				return this._Availability.Entity;
			}
			set
			{
				Availability previousValue = this._Availability.Entity;
				if (((previousValue != value) 
							|| (this._Availability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Availability.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Availability.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._Availability_ID = value.Availability_ID;
					}
					else
					{
						this._Availability_ID = default(string);
					}
					this.SendPropertyChanged("Availability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Item", Storage="_Employee", ThisKey="Employee_ID", OtherKey="Employee_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._Employee_ID = value.Employee_ID;
					}
					else
					{
						this._Employee_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_ItemType", ThisKey="ItemType_ID", OtherKey="ItemType_ID", IsForeignKey=true)]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemType_ID = value.ItemType_ID;
					}
					else
					{
						this._ItemType_ID = default(string);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetType_Item", Storage="_PetType", ThisKey="PetType_ID", OtherKey="PetType_ID", IsForeignKey=true)]
		public PetType PetType
		{
			get
			{
				return this._PetType.Entity;
			}
			set
			{
				PetType previousValue = this._PetType.Entity;
				if (((previousValue != value) 
							|| (this._PetType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._PetType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._PetType_ID = value.PetType_ID;
					}
					else
					{
						this._PetType_ID = default(string);
					}
					this.SendPropertyChanged("PetType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemType")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ItemType_ID;
		
		private string _ItemType_Name;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemType_IDChanging(string value);
    partial void OnItemType_IDChanged();
    partial void OnItemType_NameChanging(string value);
    partial void OnItemType_NameChanged();
    #endregion
		
		public ItemType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemType_ID
		{
			get
			{
				return this._ItemType_ID;
			}
			set
			{
				if ((this._ItemType_ID != value))
				{
					this.OnItemType_IDChanging(value);
					this.SendPropertyChanging();
					this._ItemType_ID = value;
					this.SendPropertyChanged("ItemType_ID");
					this.OnItemType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType_Name", DbType="NChar(10)")]
		public string ItemType_Name
		{
			get
			{
				return this._ItemType_Name;
			}
			set
			{
				if ((this._ItemType_Name != value))
				{
					this.OnItemType_NameChanging(value);
					this.SendPropertyChanging();
					this._ItemType_Name = value;
					this.SendPropertyChanged("ItemType_Name");
					this.OnItemType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_Items", ThisKey="ItemType_ID", OtherKey="ItemType_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Logs_ID;
		
		private string _Employee_ID;
		
		private string _Log_Time;
		
		private string _LogStatus_ID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<LogStatus> _LogStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogs_IDChanging(string value);
    partial void OnLogs_IDChanged();
    partial void OnEmployee_IDChanging(string value);
    partial void OnEmployee_IDChanged();
    partial void OnLog_TimeChanging(string value);
    partial void OnLog_TimeChanged();
    partial void OnLogStatus_IDChanging(string value);
    partial void OnLogStatus_IDChanged();
    #endregion
		
		public Log()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LogStatus = default(EntityRef<LogStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logs_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Logs_ID
		{
			get
			{
				return this._Logs_ID;
			}
			set
			{
				if ((this._Logs_ID != value))
				{
					this.OnLogs_IDChanging(value);
					this.SendPropertyChanging();
					this._Logs_ID = value;
					this.SendPropertyChanged("Logs_ID");
					this.OnLogs_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_ID", DbType="NChar(10)")]
		public string Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Time", DbType="NChar(10)")]
		public string Log_Time
		{
			get
			{
				return this._Log_Time;
			}
			set
			{
				if ((this._Log_Time != value))
				{
					this.OnLog_TimeChanging(value);
					this.SendPropertyChanging();
					this._Log_Time = value;
					this.SendPropertyChanged("Log_Time");
					this.OnLog_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogStatus_ID", DbType="NChar(10)")]
		public string LogStatus_ID
		{
			get
			{
				return this._LogStatus_ID;
			}
			set
			{
				if ((this._LogStatus_ID != value))
				{
					if (this._LogStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._LogStatus_ID = value;
					this.SendPropertyChanged("LogStatus_ID");
					this.OnLogStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Log", Storage="_Employee", ThisKey="Employee_ID", OtherKey="Employee_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Employee_ID = value.Employee_ID;
					}
					else
					{
						this._Employee_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogStatus_Log", Storage="_LogStatus", ThisKey="LogStatus_ID", OtherKey="LogStatus_ID", IsForeignKey=true)]
		public LogStatus LogStatus
		{
			get
			{
				return this._LogStatus.Entity;
			}
			set
			{
				LogStatus previousValue = this._LogStatus.Entity;
				if (((previousValue != value) 
							|| (this._LogStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogStatus.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._LogStatus.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._LogStatus_ID = value.LogStatus_ID;
					}
					else
					{
						this._LogStatus_ID = default(string);
					}
					this.SendPropertyChanged("LogStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogStatus")]
	public partial class LogStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LogStatus_ID;
		
		private string _LogStatus_Type;
		
		private EntitySet<Log> _Logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogStatus_IDChanging(string value);
    partial void OnLogStatus_IDChanged();
    partial void OnLogStatus_TypeChanging(string value);
    partial void OnLogStatus_TypeChanged();
    #endregion
		
		public LogStatus()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogStatus_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LogStatus_ID
		{
			get
			{
				return this._LogStatus_ID;
			}
			set
			{
				if ((this._LogStatus_ID != value))
				{
					this.OnLogStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._LogStatus_ID = value;
					this.SendPropertyChanged("LogStatus_ID");
					this.OnLogStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogStatus_Type", DbType="NChar(10)")]
		public string LogStatus_Type
		{
			get
			{
				return this._LogStatus_Type;
			}
			set
			{
				if ((this._LogStatus_Type != value))
				{
					this.OnLogStatus_TypeChanging(value);
					this.SendPropertyChanging();
					this._LogStatus_Type = value;
					this.SendPropertyChanged("LogStatus_Type");
					this.OnLogStatus_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogStatus_Log", Storage="_Logs", ThisKey="LogStatus_ID", OtherKey="LogStatus_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.LogStatus = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.LogStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pet")]
	public partial class Pet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Pet_ID;
		
		private string _Pet_Name;
		
		private string _PetType_ID;
		
		private string _Pet_Breed;
		
		private string _Pet_Weight;
		
		private string _Pet_Gender;
		
		private string _IsAdopted_ID;
		
		private string _Employee_ID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<IsAdopted> _IsAdopted;
		
		private EntityRef<PetType> _PetType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnPet_NameChanging(string value);
    partial void OnPet_NameChanged();
    partial void OnPetType_IDChanging(string value);
    partial void OnPetType_IDChanged();
    partial void OnPet_BreedChanging(string value);
    partial void OnPet_BreedChanged();
    partial void OnPet_WeightChanging(string value);
    partial void OnPet_WeightChanged();
    partial void OnPet_GenderChanging(string value);
    partial void OnPet_GenderChanged();
    partial void OnIsAdopted_IDChanging(string value);
    partial void OnIsAdopted_IDChanged();
    partial void OnEmployee_IDChanging(string value);
    partial void OnEmployee_IDChanged();
    #endregion
		
		public Pet()
		{
			this._Employee = default(EntityRef<Employee>);
			this._IsAdopted = default(EntityRef<IsAdopted>);
			this._PetType = default(EntityRef<PetType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Name", DbType="NChar(10)")]
		public string Pet_Name
		{
			get
			{
				return this._Pet_Name;
			}
			set
			{
				if ((this._Pet_Name != value))
				{
					this.OnPet_NameChanging(value);
					this.SendPropertyChanging();
					this._Pet_Name = value;
					this.SendPropertyChanged("Pet_Name");
					this.OnPet_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetType_ID", DbType="NChar(10)")]
		public string PetType_ID
		{
			get
			{
				return this._PetType_ID;
			}
			set
			{
				if ((this._PetType_ID != value))
				{
					if (this._PetType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetType_IDChanging(value);
					this.SendPropertyChanging();
					this._PetType_ID = value;
					this.SendPropertyChanged("PetType_ID");
					this.OnPetType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Breed", DbType="NChar(10)")]
		public string Pet_Breed
		{
			get
			{
				return this._Pet_Breed;
			}
			set
			{
				if ((this._Pet_Breed != value))
				{
					this.OnPet_BreedChanging(value);
					this.SendPropertyChanging();
					this._Pet_Breed = value;
					this.SendPropertyChanged("Pet_Breed");
					this.OnPet_BreedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Weight", DbType="NChar(10)")]
		public string Pet_Weight
		{
			get
			{
				return this._Pet_Weight;
			}
			set
			{
				if ((this._Pet_Weight != value))
				{
					this.OnPet_WeightChanging(value);
					this.SendPropertyChanging();
					this._Pet_Weight = value;
					this.SendPropertyChanged("Pet_Weight");
					this.OnPet_WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Gender", DbType="NChar(10)")]
		public string Pet_Gender
		{
			get
			{
				return this._Pet_Gender;
			}
			set
			{
				if ((this._Pet_Gender != value))
				{
					this.OnPet_GenderChanging(value);
					this.SendPropertyChanging();
					this._Pet_Gender = value;
					this.SendPropertyChanged("Pet_Gender");
					this.OnPet_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdopted_ID", DbType="NChar(10)")]
		public string IsAdopted_ID
		{
			get
			{
				return this._IsAdopted_ID;
			}
			set
			{
				if ((this._IsAdopted_ID != value))
				{
					if (this._IsAdopted.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIsAdopted_IDChanging(value);
					this.SendPropertyChanging();
					this._IsAdopted_ID = value;
					this.SendPropertyChanged("IsAdopted_ID");
					this.OnIsAdopted_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_ID", DbType="NChar(10)")]
		public string Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Pet", Storage="_Employee", ThisKey="Employee_ID", OtherKey="Employee_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._Employee_ID = value.Employee_ID;
					}
					else
					{
						this._Employee_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IsAdopted_Pet", Storage="_IsAdopted", ThisKey="IsAdopted_ID", OtherKey="IsAdopted_ID", IsForeignKey=true)]
		public IsAdopted IsAdopted
		{
			get
			{
				return this._IsAdopted.Entity;
			}
			set
			{
				IsAdopted previousValue = this._IsAdopted.Entity;
				if (((previousValue != value) 
							|| (this._IsAdopted.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IsAdopted.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._IsAdopted.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._IsAdopted_ID = value.IsAdopted_ID;
					}
					else
					{
						this._IsAdopted_ID = default(string);
					}
					this.SendPropertyChanged("IsAdopted");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetType_Pet", Storage="_PetType", ThisKey="PetType_ID", OtherKey="PetType_ID", IsForeignKey=true)]
		public PetType PetType
		{
			get
			{
				return this._PetType.Entity;
			}
			set
			{
				PetType previousValue = this._PetType.Entity;
				if (((previousValue != value) 
							|| (this._PetType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetType.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._PetType.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._PetType_ID = value.PetType_ID;
					}
					else
					{
						this._PetType_ID = default(string);
					}
					this.SendPropertyChanged("PetType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetType")]
	public partial class PetType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PetType_ID;
		
		private string _PetType_Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetType_IDChanging(string value);
    partial void OnPetType_IDChanged();
    partial void OnPetType_NameChanging(string value);
    partial void OnPetType_NameChanged();
    #endregion
		
		public PetType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetType_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PetType_ID
		{
			get
			{
				return this._PetType_ID;
			}
			set
			{
				if ((this._PetType_ID != value))
				{
					this.OnPetType_IDChanging(value);
					this.SendPropertyChanging();
					this._PetType_ID = value;
					this.SendPropertyChanged("PetType_ID");
					this.OnPetType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetType_Name", DbType="NChar(10)")]
		public string PetType_Name
		{
			get
			{
				return this._PetType_Name;
			}
			set
			{
				if ((this._PetType_Name != value))
				{
					this.OnPetType_NameChanging(value);
					this.SendPropertyChanging();
					this._PetType_Name = value;
					this.SendPropertyChanged("PetType_Name");
					this.OnPetType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetType_Item", Storage="_Items", ThisKey="PetType_ID", OtherKey="PetType_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetType_Pet", Storage="_Pets", ThisKey="PetType_ID", OtherKey="PetType_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.PetType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.PetType = null;
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.PetType = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.PetType = null;
		}
	}
}
#pragma warning restore 1591
